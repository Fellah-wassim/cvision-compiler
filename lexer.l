%{
#include <iostream>
// here include the header file generated by Bison for ex: #include "parser.tab.h"
%}

%option noyywrap

%%

[ \t\n\r]        ; // Ignore whitespace and newlines
\/\/[^\n]*       ; // Ignore single-line comments
\/\*[^*]*\*\/    ; // Ignore multi-line comments

[0-9]+           { yylval.integerValue = atoi(yytext); return INTEGER; }
"if"             { return IF; }
"else"           { return ELSE; }
"while"          { return WHILE; }
"for"            { return FOR; }
"int"            { return INT; }
"float"          { return FLOAT; }
"char"           { return CHAR; }
"double"         { return DOUBLE; }
"void"           { return VOID; }
"return"         { return RETURN; }
[a-zA-Z_][a-zA-Z0-9_]* { yylval.stringValue = strdup(yytext); return IDENTIFIER; }
"+"              { return PLUS; }
"-"              { return MINUS; }
"*"              { return MULTIPLY; }
"/"              { return DIVIDE; }
"="              { return ASSIGN; }
"=="             { return EQUAL; }
"!="             { return NOT_EQUAL; }
"<"              { return LESS_THAN; }
">"              { return GREATER_THAN; }
"<="             { return LESS_THAN_EQUAL; }
">="             { return GREATER_THAN_EQUAL; }
"&&"             { return LOGICAL_AND; }
"||"             { return LOGICAL_OR; }
"!"              { return LOGICAL_NOT; }
"("              { return OPEN_PAREN; }
")"              { return CLOSE_PAREN; }
"{"              { return OPEN_BRACE; }
"}"              { return CLOSE_BRACE; }
";"              { return SEMICOLON; }
","              { return COMMA; }
\.?[0-9]+(\.[0-9]+)?([eE][-+]?[0-9]+)? { yylval.floatValue = atof(yytext); return FLOAT_CONSTANT; }

.                { std::cerr << "Unrecognized token: " << yytext << std::endl; }

%%

int yywrap() {
  return 1;
}